Configuring cryptohash-0.11.9...
clang: warning: argument unused during compilation: '-nopie' [-Wunused-command-line-argument]
Preprocessing library for cryptohash-0.11.9..
Building library for cryptohash-0.11.9..
[ 1 of 21] Compiling Crypto.Hash.Internal ( Crypto/Hash/Internal.hs, .stack-work/dist/x86_64-osx/Cabal-2.2.0.1/build/Crypto/Hash/Internal.o )
[ 2 of 21] Compiling Crypto.Hash.MD2  ( Crypto/Hash/MD2.hs, .stack-work/dist/x86_64-osx/Cabal-2.2.0.1/build/Crypto/Hash/MD2.o )
[ 3 of 21] Compiling Crypto.Hash.MD4  ( Crypto/Hash/MD4.hs, .stack-work/dist/x86_64-osx/Cabal-2.2.0.1/build/Crypto/Hash/MD4.o )
[ 4 of 21] Compiling Crypto.Hash.MD5  ( Crypto/Hash/MD5.hs, .stack-work/dist/x86_64-osx/Cabal-2.2.0.1/build/Crypto/Hash/MD5.o )
[ 5 of 21] Compiling Crypto.Hash.RIPEMD160 ( Crypto/Hash/RIPEMD160.hs, .stack-work/dist/x86_64-osx/Cabal-2.2.0.1/build/Crypto/Hash/RIPEMD160.o )
[ 6 of 21] Compiling Crypto.Hash.SHA1 ( Crypto/Hash/SHA1.hs, .stack-work/dist/x86_64-osx/Cabal-2.2.0.1/build/Crypto/Hash/SHA1.o )
[ 7 of 21] Compiling Crypto.Hash.SHA224 ( Crypto/Hash/SHA224.hs, .stack-work/dist/x86_64-osx/Cabal-2.2.0.1/build/Crypto/Hash/SHA224.o )
[ 8 of 21] Compiling Crypto.Hash.SHA256 ( Crypto/Hash/SHA256.hs, .stack-work/dist/x86_64-osx/Cabal-2.2.0.1/build/Crypto/Hash/SHA256.o )
[ 9 of 21] Compiling Crypto.Hash.SHA3 ( Crypto/Hash/SHA3.hs, .stack-work/dist/x86_64-osx/Cabal-2.2.0.1/build/Crypto/Hash/SHA3.o )

[;1mCrypto/Hash/SHA3.hs:61:11: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Winline-rule-shadowing[0m[0m[;1m][0m[0m[;1m
    Rule "hashmany" may never fire
      because rule "Class op foldl" for â€˜foldlâ€™ might fire first
    Probable fix: add phase [n] or [~n] to the competing rule[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m61 |[0m[0m {-# RULES [;1m[35m"hashmany" forall b i. finalize (foldl update (init i) b) = hashlazy i (L.fromChunks b)[0m[0m #-}
[;1m[34m   |[0m[0m[;1m[35m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m
[;1mCrypto/Hash/SHA3.hs:62:11: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Winline-rule-shadowing[0m[0m[;1m][0m[0m[;1m
    Rule "hashlazy" may never fire because â€˜$â€™ might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma for â€˜$â€™[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m62 |[0m[0m {-# RULES [;1m[35m"hashlazy" forall b i. finalize (foldl update (init i) $ L.toChunks b) = hashlazy i b[0m[0m #-}
[;1m[34m   |[0m[0m[;1m[35m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m
[;1mCrypto/Hash/SHA3.hs:62:11: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Winline-rule-shadowing[0m[0m[;1m][0m[0m[;1m
    Rule "hashlazy" may never fire
      because rule "Class op foldl" for â€˜foldlâ€™ might fire first
    Probable fix: add phase [n] or [~n] to the competing rule[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m62 |[0m[0m {-# RULES [;1m[35m"hashlazy" forall b i. finalize (foldl update (init i) $ L.toChunks b) = hashlazy i b[0m[0m #-}
[;1m[34m   |[0m[0m[;1m[35m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m
[;1mCrypto/Hash/SHA3.hs:62:11: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Winline-rule-shadowing[0m[0m[;1m][0m[0m[;1m
    Rule "hashlazy" may never fire
      because â€˜L.toChunksâ€™ might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma for â€˜L.toChunksâ€™[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m62 |[0m[0m {-# RULES [;1m[35m"hashlazy" forall b i. finalize (foldl update (init i) $ L.toChunks b) = hashlazy i b[0m[0m #-}
[;1m[34m   |[0m[0m[;1m[35m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m[10 of 21] Compiling Crypto.Hash.SHA384 ( Crypto/Hash/SHA384.hs, .stack-work/dist/x86_64-osx/Cabal-2.2.0.1/build/Crypto/Hash/SHA384.o )
[11 of 21] Compiling Crypto.Hash.SHA512 ( Crypto/Hash/SHA512.hs, .stack-work/dist/x86_64-osx/Cabal-2.2.0.1/build/Crypto/Hash/SHA512.o )

[;1mCrypto/Hash/SHA512.hs:51:11: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Winline-rule-shadowing[0m[0m[;1m][0m[0m[;1m
    Rule "digestSize" may never fire
      because â€˜B.lengthâ€™ might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma for â€˜B.lengthâ€™[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m51 |[0m[0m {-# RULES [;1m[35m"digestSize" B.length (finalize init) = digestSize[0m[0m #-}
[;1m[34m   |[0m[0m[;1m[35m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m
[;1mCrypto/Hash/SHA512.hs:54:11: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Winline-rule-shadowing[0m[0m[;1m][0m[0m[;1m
    Rule "hashmany" may never fire
      because rule "Class op foldl" for â€˜foldlâ€™ might fire first
    Probable fix: add phase [n] or [~n] to the competing rule[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m54 |[0m[0m {-# RULES [;1m[35m"hashmany" forall b. finalize (foldl update init b) = hashlazy (L.fromChunks b)[0m[0m #-}
[;1m[34m   |[0m[0m[;1m[35m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m
[;1mCrypto/Hash/SHA512.hs:55:11: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Winline-rule-shadowing[0m[0m[;1m][0m[0m[;1m
    Rule "hashlazy" may never fire because â€˜$â€™ might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma for â€˜$â€™[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m55 |[0m[0m {-# RULES [;1m[35m"hashlazy" forall b. finalize (foldl update init $ L.toChunks b) = hashlazy b[0m[0m #-}
[;1m[34m   |[0m[0m[;1m[35m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m
[;1mCrypto/Hash/SHA512.hs:55:11: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Winline-rule-shadowing[0m[0m[;1m][0m[0m[;1m
    Rule "hashlazy" may never fire
      because rule "Class op foldl" for â€˜foldlâ€™ might fire first
    Probable fix: add phase [n] or [~n] to the competing rule[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m55 |[0m[0m {-# RULES [;1m[35m"hashlazy" forall b. finalize (foldl update init $ L.toChunks b) = hashlazy b[0m[0m #-}
[;1m[34m   |[0m[0m[;1m[35m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m
[;1mCrypto/Hash/SHA512.hs:55:11: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Winline-rule-shadowing[0m[0m[;1m][0m[0m[;1m
    Rule "hashlazy" may never fire
      because â€˜L.toChunksâ€™ might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma for â€˜L.toChunksâ€™[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m55 |[0m[0m {-# RULES [;1m[35m"hashlazy" forall b. finalize (foldl update init $ L.toChunks b) = hashlazy b[0m[0m #-}
[;1m[34m   |[0m[0m[;1m[35m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m[12 of 21] Compiling Crypto.Hash.SHA512t ( Crypto/Hash/SHA512t.hs, .stack-work/dist/x86_64-osx/Cabal-2.2.0.1/build/Crypto/Hash/SHA512t.o )

[;1mon the commandline: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wtrustworthy-safe[0m[0m[;1m][0m[0m[;1m
    â€˜Crypto.Hash.SHA512tâ€™ is marked as Trustworthy but has been inferred as safe![0m[0m
[0m[0m[0m[13 of 21] Compiling Crypto.Hash.Skein256 ( Crypto/Hash/Skein256.hs, .stack-work/dist/x86_64-osx/Cabal-2.2.0.1/build/Crypto/Hash/Skein256.o )

[;1mCrypto/Hash/Skein256.hs:53:11: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Winline-rule-shadowing[0m[0m[;1m][0m[0m[;1m
    Rule "hashmany" may never fire
      because rule "Class op foldl" for â€˜foldlâ€™ might fire first
    Probable fix: add phase [n] or [~n] to the competing rule[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m53 |[0m[0m {-# RULES [;1m[35m"hashmany" forall b i. finalize (foldl update (init i) b) = hashlazy i (L.fromChunks b)[0m[0m #-}
[;1m[34m   |[0m[0m[;1m[35m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m
[;1mCrypto/Hash/Skein256.hs:54:11: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Winline-rule-shadowing[0m[0m[;1m][0m[0m[;1m
    Rule "hashlazy" may never fire because â€˜$â€™ might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma for â€˜$â€™[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m54 |[0m[0m {-# RULES [;1m[35m"hashlazy" forall b i. finalize (foldl update (init i) $ L.toChunks b) = hashlazy i b[0m[0m #-}
[;1m[34m   |[0m[0m[;1m[35m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m
[;1mCrypto/Hash/Skein256.hs:54:11: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Winline-rule-shadowing[0m[0m[;1m][0m[0m[;1m
    Rule "hashlazy" may never fire
      because rule "Class op foldl" for â€˜foldlâ€™ might fire first
    Probable fix: add phase [n] or [~n] to the competing rule[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m54 |[0m[0m {-# RULES [;1m[35m"hashlazy" forall b i. finalize (foldl update (init i) $ L.toChunks b) = hashlazy i b[0m[0m #-}
[;1m[34m   |[0m[0m[;1m[35m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m
[;1mCrypto/Hash/Skein256.hs:54:11: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Winline-rule-shadowing[0m[0m[;1m][0m[0m[;1m
    Rule "hashlazy" may never fire
      because â€˜L.toChunksâ€™ might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma for â€˜L.toChunksâ€™[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m54 |[0m[0m {-# RULES [;1m[35m"hashlazy" forall b i. finalize (foldl update (init i) $ L.toChunks b) = hashlazy i b[0m[0m #-}
[;1m[34m   |[0m[0m[;1m[35m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m[14 of 21] Compiling Crypto.Hash.Skein512 ( Crypto/Hash/Skein512.hs, .stack-work/dist/x86_64-osx/Cabal-2.2.0.1/build/Crypto/Hash/Skein512.o )

[;1mCrypto/Hash/Skein512.hs:53:11: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Winline-rule-shadowing[0m[0m[;1m][0m[0m[;1m
    Rule "hashmany" may never fire
      because rule "Class op foldl" for â€˜foldlâ€™ might fire first
    Probable fix: add phase [n] or [~n] to the competing rule[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m53 |[0m[0m {-# RULES [;1m[35m"hashmany" forall b i. finalize (foldl update (init i) b) = hashlazy i (L.fromChunks b)[0m[0m #-}
[;1m[34m   |[0m[0m[;1m[35m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m
[;1mCrypto/Hash/Skein512.hs:54:11: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Winline-rule-shadowing[0m[0m[;1m][0m[0m[;1m
    Rule "hashlazy" may never fire because â€˜$â€™ might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma for â€˜$â€™[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m54 |[0m[0m {-# RULES [;1m[35m"hashlazy" forall b i. finalize (foldl update (init i) $ L.toChunks b) = hashlazy i b[0m[0m #-}
[;1m[34m   |[0m[0m[;1m[35m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m
[;1mCrypto/Hash/Skein512.hs:54:11: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Winline-rule-shadowing[0m[0m[;1m][0m[0m[;1m
    Rule "hashlazy" may never fire
      because rule "Class op foldl" for â€˜foldlâ€™ might fire first
    Probable fix: add phase [n] or [~n] to the competing rule[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m54 |[0m[0m {-# RULES [;1m[35m"hashlazy" forall b i. finalize (foldl update (init i) $ L.toChunks b) = hashlazy i b[0m[0m #-}
[;1m[34m   |[0m[0m[;1m[35m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m
[;1mCrypto/Hash/Skein512.hs:54:11: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Winline-rule-shadowing[0m[0m[;1m][0m[0m[;1m
    Rule "hashlazy" may never fire
      because â€˜L.toChunksâ€™ might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma for â€˜L.toChunksâ€™[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m54 |[0m[0m {-# RULES [;1m[35m"hashlazy" forall b i. finalize (foldl update (init i) $ L.toChunks b) = hashlazy i b[0m[0m #-}
[;1m[34m   |[0m[0m[;1m[35m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m[15 of 21] Compiling Crypto.Hash.Tiger ( Crypto/Hash/Tiger.hs, .stack-work/dist/x86_64-osx/Cabal-2.2.0.1/build/Crypto/Hash/Tiger.o )
[16 of 21] Compiling Crypto.Hash.Types ( Crypto/Hash/Types.hs, .stack-work/dist/x86_64-osx/Cabal-2.2.0.1/build/Crypto/Hash/Types.o )
[17 of 21] Compiling Crypto.Hash      ( Crypto/Hash.hs, .stack-work/dist/x86_64-osx/Cabal-2.2.0.1/build/Crypto/Hash.o )
[18 of 21] Compiling Crypto.Hash.Whirlpool ( Crypto/Hash/Whirlpool.hs, .stack-work/dist/x86_64-osx/Cabal-2.2.0.1/build/Crypto/Hash/Whirlpool.o )
[19 of 21] Compiling Crypto.MAC       ( Crypto/MAC.hs, .stack-work/dist/x86_64-osx/Cabal-2.2.0.1/build/Crypto/MAC.o )
[20 of 21] Compiling Crypto.MAC.HMAC  ( Crypto/MAC/HMAC.hs, .stack-work/dist/x86_64-osx/Cabal-2.2.0.1/build/Crypto/MAC/HMAC.o )

[;1mon the commandline: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wtrustworthy-safe[0m[0m[;1m][0m[0m[;1m
    â€˜Crypto.MAC.HMACâ€™ is marked as Trustworthy but has been inferred as safe![0m[0m
[0m[0m[0m[21 of 21] Compiling Crypto.MAC.SHA3  ( Crypto/MAC/SHA3.hs, .stack-work/dist/x86_64-osx/Cabal-2.2.0.1/build/Crypto/MAC/SHA3.o )
clang: warning: argument unused during compilation: '-nopie' [-Wunused-command-line-argument]
clang: warning: argument unused during compilation: '-nopie' [-Wunused-command-line-argument]
clang: warning: argument unused during compilation: '-nopie' [-Wunused-command-line-argument]
clang: warning: argument unused during compilation: '-nopie' [-Wunused-command-line-argument]
clang: warning: argument unused during compilation: '-nopie' [-Wunused-command-line-argument]
clang: warning: argument unused during compilation: '-nopie' [-Wunused-command-line-argument]
clang: warning: argument unused during compilation: '-nopie' [-Wunused-command-line-argument]
clang: warning: argument unused during compilation: '-nopie' [-Wunused-command-line-argument]
ignoring (possibly broken) abi-depends field for packages
Installing library in /Users/takuya/.stack/snapshots/x86_64-osx/lts-12.7/8.4.3/lib/x86_64-osx-ghc-8.4.3/cryptohash-0.11.9-2BOVjTRuT8c8xfsRB26m7w
Registering library for cryptohash-0.11.9..
